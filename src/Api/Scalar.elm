-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Scalar exposing (AWSDateTime(..), Awsurl(..), Codecs, Id(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type AWSDateTime
    = AWSDateTime String


type Awsurl
    = Awsurl String


type Id
    = Id String


defineCodecs :
    { codecAWSDateTime : Codec valueAWSDateTime
    , codecAwsurl : Codec valueAwsurl
    , codecId : Codec valueId
    }
    -> Codecs valueAWSDateTime valueAwsurl valueId
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueAWSDateTime valueAwsurl valueId
    ->
        { codecAWSDateTime : Codec valueAWSDateTime
        , codecAwsurl : Codec valueAwsurl
        , codecId : Codec valueId
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder :
    (RawCodecs valueAWSDateTime valueAwsurl valueId -> Codec getterValue)
    -> Codecs valueAWSDateTime valueAwsurl valueId
    -> getterValue
    -> Graphql.Internal.Encode.Value
unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueAWSDateTime valueAwsurl valueId
    = Codecs (RawCodecs valueAWSDateTime valueAwsurl valueId)


type alias RawCodecs valueAWSDateTime valueAwsurl valueId =
    { codecAWSDateTime : Codec valueAWSDateTime
    , codecAwsurl : Codec valueAwsurl
    , codecId : Codec valueId
    }


defaultCodecs : RawCodecs AWSDateTime Awsurl Id
defaultCodecs =
    { codecAWSDateTime =
        { encoder = \(AWSDateTime raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map AWSDateTime
        }
    , codecAwsurl =
        { encoder = \(Awsurl raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Awsurl
        }
    , codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    }
