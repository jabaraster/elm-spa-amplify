-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Mutation exposing (CreateKayoinobaOptionalArguments, CreateKayoinobaRequiredArguments, CreateMapOptionalArguments, CreateMapRequiredArguments, CreatePlaceOptionalArguments, CreatePlaceRequiredArguments, DeleteKayoinobaOptionalArguments, DeleteKayoinobaRequiredArguments, DeleteMapOptionalArguments, DeleteMapRequiredArguments, DeletePlaceOptionalArguments, DeletePlaceRequiredArguments, UpdateKayoinobaOptionalArguments, UpdateKayoinobaRequiredArguments, UpdateMapOptionalArguments, UpdateMapRequiredArguments, UpdatePlaceOptionalArguments, UpdatePlaceRequiredArguments, createKayoinoba, createMap, createPlace, deleteKayoinoba, deleteMap, deletePlace, updateKayoinoba, updateMap, updatePlace)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias CreateMapOptionalArguments =
    { condition : OptionalArgument Api.InputObject.ModelMapConditionInput }


type alias CreateMapRequiredArguments =
    { input : Api.InputObject.CreateMapInput }


createMap :
    (CreateMapOptionalArguments -> CreateMapOptionalArguments)
    -> CreateMapRequiredArguments
    -> SelectionSet decodesTo Api.Object.Map
    -> SelectionSet (Maybe decodesTo) RootMutation
createMap fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { condition = Absent }

        optionalArgs____ =
            [ Argument.optional "condition" filledInOptionals____.condition Api.InputObject.encodeModelMapConditionInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "createMap" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input Api.InputObject.encodeCreateMapInput ]) object____ (Basics.identity >> Decode.nullable)


type alias UpdateMapOptionalArguments =
    { condition : OptionalArgument Api.InputObject.ModelMapConditionInput }


type alias UpdateMapRequiredArguments =
    { input : Api.InputObject.UpdateMapInput }


updateMap :
    (UpdateMapOptionalArguments -> UpdateMapOptionalArguments)
    -> UpdateMapRequiredArguments
    -> SelectionSet decodesTo Api.Object.Map
    -> SelectionSet (Maybe decodesTo) RootMutation
updateMap fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { condition = Absent }

        optionalArgs____ =
            [ Argument.optional "condition" filledInOptionals____.condition Api.InputObject.encodeModelMapConditionInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "updateMap" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input Api.InputObject.encodeUpdateMapInput ]) object____ (Basics.identity >> Decode.nullable)


type alias DeleteMapOptionalArguments =
    { condition : OptionalArgument Api.InputObject.ModelMapConditionInput }


type alias DeleteMapRequiredArguments =
    { input : Api.InputObject.DeleteMapInput }


deleteMap :
    (DeleteMapOptionalArguments -> DeleteMapOptionalArguments)
    -> DeleteMapRequiredArguments
    -> SelectionSet decodesTo Api.Object.Map
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteMap fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { condition = Absent }

        optionalArgs____ =
            [ Argument.optional "condition" filledInOptionals____.condition Api.InputObject.encodeModelMapConditionInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "deleteMap" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input Api.InputObject.encodeDeleteMapInput ]) object____ (Basics.identity >> Decode.nullable)


type alias CreatePlaceOptionalArguments =
    { condition : OptionalArgument Api.InputObject.ModelPlaceConditionInput }


type alias CreatePlaceRequiredArguments =
    { input : Api.InputObject.CreatePlaceInput }


createPlace :
    (CreatePlaceOptionalArguments -> CreatePlaceOptionalArguments)
    -> CreatePlaceRequiredArguments
    -> SelectionSet decodesTo Api.Object.Place
    -> SelectionSet (Maybe decodesTo) RootMutation
createPlace fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { condition = Absent }

        optionalArgs____ =
            [ Argument.optional "condition" filledInOptionals____.condition Api.InputObject.encodeModelPlaceConditionInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "createPlace" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input Api.InputObject.encodeCreatePlaceInput ]) object____ (Basics.identity >> Decode.nullable)


type alias UpdatePlaceOptionalArguments =
    { condition : OptionalArgument Api.InputObject.ModelPlaceConditionInput }


type alias UpdatePlaceRequiredArguments =
    { input : Api.InputObject.UpdatePlaceInput }


updatePlace :
    (UpdatePlaceOptionalArguments -> UpdatePlaceOptionalArguments)
    -> UpdatePlaceRequiredArguments
    -> SelectionSet decodesTo Api.Object.Place
    -> SelectionSet (Maybe decodesTo) RootMutation
updatePlace fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { condition = Absent }

        optionalArgs____ =
            [ Argument.optional "condition" filledInOptionals____.condition Api.InputObject.encodeModelPlaceConditionInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "updatePlace" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input Api.InputObject.encodeUpdatePlaceInput ]) object____ (Basics.identity >> Decode.nullable)


type alias DeletePlaceOptionalArguments =
    { condition : OptionalArgument Api.InputObject.ModelPlaceConditionInput }


type alias DeletePlaceRequiredArguments =
    { input : Api.InputObject.DeletePlaceInput }


deletePlace :
    (DeletePlaceOptionalArguments -> DeletePlaceOptionalArguments)
    -> DeletePlaceRequiredArguments
    -> SelectionSet decodesTo Api.Object.Place
    -> SelectionSet (Maybe decodesTo) RootMutation
deletePlace fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { condition = Absent }

        optionalArgs____ =
            [ Argument.optional "condition" filledInOptionals____.condition Api.InputObject.encodeModelPlaceConditionInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "deletePlace" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input Api.InputObject.encodeDeletePlaceInput ]) object____ (Basics.identity >> Decode.nullable)


type alias CreateKayoinobaOptionalArguments =
    { condition : OptionalArgument Api.InputObject.ModelKayoinobaConditionInput }


type alias CreateKayoinobaRequiredArguments =
    { input : Api.InputObject.CreateKayoinobaInput }


createKayoinoba :
    (CreateKayoinobaOptionalArguments -> CreateKayoinobaOptionalArguments)
    -> CreateKayoinobaRequiredArguments
    -> SelectionSet decodesTo Api.Object.Kayoinoba
    -> SelectionSet (Maybe decodesTo) RootMutation
createKayoinoba fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { condition = Absent }

        optionalArgs____ =
            [ Argument.optional "condition" filledInOptionals____.condition Api.InputObject.encodeModelKayoinobaConditionInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "createKayoinoba" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input Api.InputObject.encodeCreateKayoinobaInput ]) object____ (Basics.identity >> Decode.nullable)


type alias UpdateKayoinobaOptionalArguments =
    { condition : OptionalArgument Api.InputObject.ModelKayoinobaConditionInput }


type alias UpdateKayoinobaRequiredArguments =
    { input : Api.InputObject.UpdateKayoinobaInput }


updateKayoinoba :
    (UpdateKayoinobaOptionalArguments -> UpdateKayoinobaOptionalArguments)
    -> UpdateKayoinobaRequiredArguments
    -> SelectionSet decodesTo Api.Object.Kayoinoba
    -> SelectionSet (Maybe decodesTo) RootMutation
updateKayoinoba fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { condition = Absent }

        optionalArgs____ =
            [ Argument.optional "condition" filledInOptionals____.condition Api.InputObject.encodeModelKayoinobaConditionInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "updateKayoinoba" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input Api.InputObject.encodeUpdateKayoinobaInput ]) object____ (Basics.identity >> Decode.nullable)


type alias DeleteKayoinobaOptionalArguments =
    { condition : OptionalArgument Api.InputObject.ModelKayoinobaConditionInput }


type alias DeleteKayoinobaRequiredArguments =
    { input : Api.InputObject.DeleteKayoinobaInput }


deleteKayoinoba :
    (DeleteKayoinobaOptionalArguments -> DeleteKayoinobaOptionalArguments)
    -> DeleteKayoinobaRequiredArguments
    -> SelectionSet decodesTo Api.Object.Kayoinoba
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteKayoinoba fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { condition = Absent }

        optionalArgs____ =
            [ Argument.optional "condition" filledInOptionals____.condition Api.InputObject.encodeModelKayoinobaConditionInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "deleteKayoinoba" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input Api.InputObject.encodeDeleteKayoinobaInput ]) object____ (Basics.identity >> Decode.nullable)
