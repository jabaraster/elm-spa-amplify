-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Subscription exposing (OnCreateKayoinobaOptionalArguments, OnCreateMapOptionalArguments, OnCreatePlaceOptionalArguments, OnDeleteKayoinobaOptionalArguments, OnDeleteMapOptionalArguments, OnDeletePlaceOptionalArguments, OnUpdateKayoinobaOptionalArguments, OnUpdateMapOptionalArguments, OnUpdatePlaceOptionalArguments, onCreateKayoinoba, onCreateMap, onCreatePlace, onDeleteKayoinoba, onDeleteMap, onDeletePlace, onUpdateKayoinoba, onUpdateMap, onUpdatePlace)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias OnCreateMapOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ModelSubscriptionMapFilterInput }


onCreateMap :
    (OnCreateMapOptionalArguments -> OnCreateMapOptionalArguments)
    -> SelectionSet decodesTo Api.Object.Map
    -> SelectionSet (Maybe decodesTo) RootSubscription
onCreateMap fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Api.InputObject.encodeModelSubscriptionMapFilterInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "onCreateMap" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias OnUpdateMapOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ModelSubscriptionMapFilterInput }


onUpdateMap :
    (OnUpdateMapOptionalArguments -> OnUpdateMapOptionalArguments)
    -> SelectionSet decodesTo Api.Object.Map
    -> SelectionSet (Maybe decodesTo) RootSubscription
onUpdateMap fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Api.InputObject.encodeModelSubscriptionMapFilterInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "onUpdateMap" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias OnDeleteMapOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ModelSubscriptionMapFilterInput }


onDeleteMap :
    (OnDeleteMapOptionalArguments -> OnDeleteMapOptionalArguments)
    -> SelectionSet decodesTo Api.Object.Map
    -> SelectionSet (Maybe decodesTo) RootSubscription
onDeleteMap fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Api.InputObject.encodeModelSubscriptionMapFilterInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "onDeleteMap" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias OnCreatePlaceOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ModelSubscriptionPlaceFilterInput }


onCreatePlace :
    (OnCreatePlaceOptionalArguments -> OnCreatePlaceOptionalArguments)
    -> SelectionSet decodesTo Api.Object.Place
    -> SelectionSet (Maybe decodesTo) RootSubscription
onCreatePlace fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Api.InputObject.encodeModelSubscriptionPlaceFilterInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "onCreatePlace" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias OnUpdatePlaceOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ModelSubscriptionPlaceFilterInput }


onUpdatePlace :
    (OnUpdatePlaceOptionalArguments -> OnUpdatePlaceOptionalArguments)
    -> SelectionSet decodesTo Api.Object.Place
    -> SelectionSet (Maybe decodesTo) RootSubscription
onUpdatePlace fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Api.InputObject.encodeModelSubscriptionPlaceFilterInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "onUpdatePlace" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias OnDeletePlaceOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ModelSubscriptionPlaceFilterInput }


onDeletePlace :
    (OnDeletePlaceOptionalArguments -> OnDeletePlaceOptionalArguments)
    -> SelectionSet decodesTo Api.Object.Place
    -> SelectionSet (Maybe decodesTo) RootSubscription
onDeletePlace fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Api.InputObject.encodeModelSubscriptionPlaceFilterInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "onDeletePlace" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias OnCreateKayoinobaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ModelSubscriptionKayoinobaFilterInput }


onCreateKayoinoba :
    (OnCreateKayoinobaOptionalArguments -> OnCreateKayoinobaOptionalArguments)
    -> SelectionSet decodesTo Api.Object.Kayoinoba
    -> SelectionSet (Maybe decodesTo) RootSubscription
onCreateKayoinoba fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Api.InputObject.encodeModelSubscriptionKayoinobaFilterInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "onCreateKayoinoba" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias OnUpdateKayoinobaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ModelSubscriptionKayoinobaFilterInput }


onUpdateKayoinoba :
    (OnUpdateKayoinobaOptionalArguments -> OnUpdateKayoinobaOptionalArguments)
    -> SelectionSet decodesTo Api.Object.Kayoinoba
    -> SelectionSet (Maybe decodesTo) RootSubscription
onUpdateKayoinoba fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Api.InputObject.encodeModelSubscriptionKayoinobaFilterInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "onUpdateKayoinoba" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias OnDeleteKayoinobaOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ModelSubscriptionKayoinobaFilterInput }


onDeleteKayoinoba :
    (OnDeleteKayoinobaOptionalArguments -> OnDeleteKayoinobaOptionalArguments)
    -> SelectionSet decodesTo Api.Object.Kayoinoba
    -> SelectionSet (Maybe decodesTo) RootSubscription
onDeleteKayoinoba fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Api.InputObject.encodeModelSubscriptionKayoinobaFilterInput ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "onDeleteKayoinoba" optionalArgs____ object____ (Basics.identity >> Decode.nullable)
