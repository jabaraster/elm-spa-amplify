-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (ColorInput, ColorInputRequiredFields, CreateKayoinobaInput, CreateKayoinobaInputOptionalFields, CreateKayoinobaInputRequiredFields, CreateMapInput, CreateMapInputOptionalFields, CreateMapInputRequiredFields, CreatePlaceInput, CreatePlaceInputOptionalFields, CreatePlaceInputRequiredFields, DeleteKayoinobaInput, DeleteKayoinobaInputRequiredFields, DeleteMapInput, DeleteMapInputRequiredFields, DeletePlaceInput, DeletePlaceInputRequiredFields, KayoinobaAttributesInput, KayoinobaAttributesInputRequiredFields, LocationInput, LocationInputRequiredFields, ModelBooleanInput, ModelBooleanInputOptionalFields, ModelFloatInput, ModelFloatInputOptionalFields, ModelIDInput, ModelIDInputOptionalFields, ModelIntInput, ModelIntInputOptionalFields, ModelKayoinobaConditionInput(..), ModelKayoinobaConditionInputOptionalFields, ModelKayoinobaConditionInputRaw, ModelKayoinobaFilterInput(..), ModelKayoinobaFilterInputOptionalFields, ModelKayoinobaFilterInputRaw, ModelMapConditionInput(..), ModelMapConditionInputOptionalFields, ModelMapConditionInputRaw, ModelMapFilterInput(..), ModelMapFilterInputOptionalFields, ModelMapFilterInputRaw, ModelPlaceCategoryInput, ModelPlaceCategoryInputOptionalFields, ModelPlaceConditionInput(..), ModelPlaceConditionInputOptionalFields, ModelPlaceConditionInputRaw, ModelPlaceFilterInput(..), ModelPlaceFilterInputOptionalFields, ModelPlaceFilterInputRaw, ModelSizeInput, ModelSizeInputOptionalFields, ModelStringInput, ModelStringInputOptionalFields, ModelSubscriptionBooleanInput, ModelSubscriptionBooleanInputOptionalFields, ModelSubscriptionFloatInput, ModelSubscriptionFloatInputOptionalFields, ModelSubscriptionIDInput, ModelSubscriptionIDInputOptionalFields, ModelSubscriptionIntInput, ModelSubscriptionIntInputOptionalFields, ModelSubscriptionKayoinobaFilterInput(..), ModelSubscriptionKayoinobaFilterInputOptionalFields, ModelSubscriptionKayoinobaFilterInputRaw, ModelSubscriptionMapFilterInput(..), ModelSubscriptionMapFilterInputOptionalFields, ModelSubscriptionMapFilterInputRaw, ModelSubscriptionPlaceFilterInput(..), ModelSubscriptionPlaceFilterInputOptionalFields, ModelSubscriptionPlaceFilterInputRaw, ModelSubscriptionStringInput, ModelSubscriptionStringInputOptionalFields, UpdateKayoinobaInput, UpdateKayoinobaInputOptionalFields, UpdateKayoinobaInputRequiredFields, UpdateMapInput, UpdateMapInputOptionalFields, UpdateMapInputRequiredFields, UpdatePlaceInput, UpdatePlaceInputOptionalFields, UpdatePlaceInputRequiredFields, buildColorInput, buildCreateKayoinobaInput, buildCreateMapInput, buildCreatePlaceInput, buildDeleteKayoinobaInput, buildDeleteMapInput, buildDeletePlaceInput, buildKayoinobaAttributesInput, buildLocationInput, buildModelBooleanInput, buildModelFloatInput, buildModelIDInput, buildModelIntInput, buildModelKayoinobaConditionInput, buildModelKayoinobaFilterInput, buildModelMapConditionInput, buildModelMapFilterInput, buildModelPlaceCategoryInput, buildModelPlaceConditionInput, buildModelPlaceFilterInput, buildModelSizeInput, buildModelStringInput, buildModelSubscriptionBooleanInput, buildModelSubscriptionFloatInput, buildModelSubscriptionIDInput, buildModelSubscriptionIntInput, buildModelSubscriptionKayoinobaFilterInput, buildModelSubscriptionMapFilterInput, buildModelSubscriptionPlaceFilterInput, buildModelSubscriptionStringInput, buildUpdateKayoinobaInput, buildUpdateMapInput, buildUpdatePlaceInput, encodeColorInput, encodeCreateKayoinobaInput, encodeCreateMapInput, encodeCreatePlaceInput, encodeDeleteKayoinobaInput, encodeDeleteMapInput, encodeDeletePlaceInput, encodeKayoinobaAttributesInput, encodeLocationInput, encodeModelBooleanInput, encodeModelFloatInput, encodeModelIDInput, encodeModelIntInput, encodeModelKayoinobaConditionInput, encodeModelKayoinobaFilterInput, encodeModelMapConditionInput, encodeModelMapFilterInput, encodeModelPlaceCategoryInput, encodeModelPlaceConditionInput, encodeModelPlaceFilterInput, encodeModelSizeInput, encodeModelStringInput, encodeModelSubscriptionBooleanInput, encodeModelSubscriptionFloatInput, encodeModelSubscriptionIDInput, encodeModelSubscriptionIntInput, encodeModelSubscriptionKayoinobaFilterInput, encodeModelSubscriptionMapFilterInput, encodeModelSubscriptionPlaceFilterInput, encodeModelSubscriptionStringInput, encodeUpdateKayoinobaInput, encodeUpdateMapInput, encodeUpdatePlaceInput)

import Api.Enum.ModelAttributeTypes
import Api.Enum.PlaceCategory
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildColorInput :
    ColorInputRequiredFields
    -> ColorInput
buildColorInput required____ =
    { red = required____.red, green = required____.green, blue = required____.blue, alpha = required____.alpha }


type alias ColorInputRequiredFields =
    { red : Int
    , green : Int
    , blue : Int
    , alpha : Float
    }


{-| Type for the ColorInput input object.
-}
type alias ColorInput =
    { red : Int
    , green : Int
    , blue : Int
    , alpha : Float
    }


{-| Encode a ColorInput into a value that can be used as an argument.
-}
encodeColorInput : ColorInput -> Value
encodeColorInput input____ =
    Encode.maybeObject
        [ ( "red", Encode.int input____.red |> Just ), ( "green", Encode.int input____.green |> Just ), ( "blue", Encode.int input____.blue |> Just ), ( "alpha", Encode.float input____.alpha |> Just ) ]


buildCreateKayoinobaInput :
    CreateKayoinobaInputRequiredFields
    -> (CreateKayoinobaInputOptionalFields -> CreateKayoinobaInputOptionalFields)
    -> CreateKayoinobaInput
buildCreateKayoinobaInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, price = Absent, webSite = Absent }
    in
    { id = optionals____.id, name = required____.name, yomigana = required____.yomigana, summary = required____.summary, price = optionals____.price, target = required____.target, contact = required____.contact, webSite = optionals____.webSite, attributes = required____.attributes, mapIdForSearch = required____.mapIdForSearch, kayoinobaPlaceId = required____.kayoinobaPlaceId }


type alias CreateKayoinobaInputRequiredFields =
    { name : String
    , yomigana : String
    , summary : String
    , target : String
    , contact : String
    , attributes : KayoinobaAttributesInput
    , mapIdForSearch : Api.ScalarCodecs.Id
    , kayoinobaPlaceId : Api.ScalarCodecs.Id
    }


type alias CreateKayoinobaInputOptionalFields =
    { id : OptionalArgument Api.ScalarCodecs.Id
    , price : OptionalArgument Int
    , webSite : OptionalArgument Api.ScalarCodecs.Awsurl
    }


{-| Type for the CreateKayoinobaInput input object.
-}
type alias CreateKayoinobaInput =
    { id : OptionalArgument Api.ScalarCodecs.Id
    , name : String
    , yomigana : String
    , summary : String
    , price : OptionalArgument Int
    , target : String
    , contact : String
    , webSite : OptionalArgument Api.ScalarCodecs.Awsurl
    , attributes : KayoinobaAttributesInput
    , mapIdForSearch : Api.ScalarCodecs.Id
    , kayoinobaPlaceId : Api.ScalarCodecs.Id
    }


{-| Encode a CreateKayoinobaInput into a value that can be used as an argument.
-}
encodeCreateKayoinobaInput : CreateKayoinobaInput -> Value
encodeCreateKayoinobaInput input____ =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "name", Encode.string input____.name |> Just ), ( "yomigana", Encode.string input____.yomigana |> Just ), ( "summary", Encode.string input____.summary |> Just ), ( "price", Encode.int |> Encode.optional input____.price ), ( "target", Encode.string input____.target |> Just ), ( "contact", Encode.string input____.contact |> Just ), ( "webSite", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecAwsurl) |> Encode.optional input____.webSite ), ( "attributes", encodeKayoinobaAttributesInput input____.attributes |> Just ), ( "mapIdForSearch", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.mapIdForSearch |> Just ), ( "kayoinobaPlaceId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.kayoinobaPlaceId |> Just ) ]


buildCreateMapInput :
    CreateMapInputRequiredFields
    -> (CreateMapInputOptionalFields -> CreateMapInputOptionalFields)
    -> CreateMapInput
buildCreateMapInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent }
    in
    { id = optionals____.id, name = required____.name, title = required____.title, topInformation = required____.topInformation, zoom = required____.zoom, centerLocation = required____.centerLocation, category1Name = required____.category1Name, category2Name = required____.category2Name, category3Name = required____.category3Name, themeColor = required____.themeColor }


type alias CreateMapInputRequiredFields =
    { name : String
    , title : String
    , topInformation : String
    , zoom : Int
    , centerLocation : LocationInput
    , category1Name : String
    , category2Name : String
    , category3Name : String
    , themeColor : ColorInput
    }


type alias CreateMapInputOptionalFields =
    { id : OptionalArgument Api.ScalarCodecs.Id }


{-| Type for the CreateMapInput input object.
-}
type alias CreateMapInput =
    { id : OptionalArgument Api.ScalarCodecs.Id
    , name : String
    , title : String
    , topInformation : String
    , zoom : Int
    , centerLocation : LocationInput
    , category1Name : String
    , category2Name : String
    , category3Name : String
    , themeColor : ColorInput
    }


{-| Encode a CreateMapInput into a value that can be used as an argument.
-}
encodeCreateMapInput : CreateMapInput -> Value
encodeCreateMapInput input____ =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "name", Encode.string input____.name |> Just ), ( "title", Encode.string input____.title |> Just ), ( "topInformation", Encode.string input____.topInformation |> Just ), ( "zoom", Encode.int input____.zoom |> Just ), ( "centerLocation", encodeLocationInput input____.centerLocation |> Just ), ( "category1Name", Encode.string input____.category1Name |> Just ), ( "category2Name", Encode.string input____.category2Name |> Just ), ( "category3Name", Encode.string input____.category3Name |> Just ), ( "themeColor", encodeColorInput input____.themeColor |> Just ) ]


buildCreatePlaceInput :
    CreatePlaceInputRequiredFields
    -> (CreatePlaceInputOptionalFields -> CreatePlaceInputOptionalFields)
    -> CreatePlaceInput
buildCreatePlaceInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent }
    in
    { id = optionals____.id, name = required____.name, address = required____.address, category = required____.category, contact = required____.contact, location = required____.location, hasImage = required____.hasImage, placeMapId = required____.placeMapId }


type alias CreatePlaceInputRequiredFields =
    { name : String
    , address : String
    , category : Api.Enum.PlaceCategory.PlaceCategory
    , contact : String
    , location : LocationInput
    , hasImage : Bool
    , placeMapId : Api.ScalarCodecs.Id
    }


type alias CreatePlaceInputOptionalFields =
    { id : OptionalArgument Api.ScalarCodecs.Id }


{-| Type for the CreatePlaceInput input object.
-}
type alias CreatePlaceInput =
    { id : OptionalArgument Api.ScalarCodecs.Id
    , name : String
    , address : String
    , category : Api.Enum.PlaceCategory.PlaceCategory
    , contact : String
    , location : LocationInput
    , hasImage : Bool
    , placeMapId : Api.ScalarCodecs.Id
    }


{-| Encode a CreatePlaceInput into a value that can be used as an argument.
-}
encodeCreatePlaceInput : CreatePlaceInput -> Value
encodeCreatePlaceInput input____ =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "name", Encode.string input____.name |> Just ), ( "address", Encode.string input____.address |> Just ), ( "category", Encode.enum Api.Enum.PlaceCategory.toString input____.category |> Just ), ( "contact", Encode.string input____.contact |> Just ), ( "location", encodeLocationInput input____.location |> Just ), ( "hasImage", Encode.bool input____.hasImage |> Just ), ( "placeMapId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.placeMapId |> Just ) ]


buildDeleteKayoinobaInput :
    DeleteKayoinobaInputRequiredFields
    -> DeleteKayoinobaInput
buildDeleteKayoinobaInput required____ =
    { id = required____.id }


type alias DeleteKayoinobaInputRequiredFields =
    { id : Api.ScalarCodecs.Id }


{-| Type for the DeleteKayoinobaInput input object.
-}
type alias DeleteKayoinobaInput =
    { id : Api.ScalarCodecs.Id }


{-| Encode a DeleteKayoinobaInput into a value that can be used as an argument.
-}
encodeDeleteKayoinobaInput : DeleteKayoinobaInput -> Value
encodeDeleteKayoinobaInput input____ =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.id |> Just ) ]


buildDeleteMapInput :
    DeleteMapInputRequiredFields
    -> DeleteMapInput
buildDeleteMapInput required____ =
    { id = required____.id }


type alias DeleteMapInputRequiredFields =
    { id : Api.ScalarCodecs.Id }


{-| Type for the DeleteMapInput input object.
-}
type alias DeleteMapInput =
    { id : Api.ScalarCodecs.Id }


{-| Encode a DeleteMapInput into a value that can be used as an argument.
-}
encodeDeleteMapInput : DeleteMapInput -> Value
encodeDeleteMapInput input____ =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.id |> Just ) ]


buildDeletePlaceInput :
    DeletePlaceInputRequiredFields
    -> DeletePlaceInput
buildDeletePlaceInput required____ =
    { id = required____.id }


type alias DeletePlaceInputRequiredFields =
    { id : Api.ScalarCodecs.Id }


{-| Type for the DeletePlaceInput input object.
-}
type alias DeletePlaceInput =
    { id : Api.ScalarCodecs.Id }


{-| Encode a DeletePlaceInput into a value that can be used as an argument.
-}
encodeDeletePlaceInput : DeletePlaceInput -> Value
encodeDeletePlaceInput input____ =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.id |> Just ) ]


buildKayoinobaAttributesInput :
    KayoinobaAttributesInputRequiredFields
    -> KayoinobaAttributesInput
buildKayoinobaAttributesInput required____ =
    { taisou = required____.taisou, noutore = required____.noutore, ongaku = required____.ongaku, insyokuari = required____.insyokuari, undou = required____.undou, free = required____.free }


type alias KayoinobaAttributesInputRequiredFields =
    { taisou : Bool
    , noutore : Bool
    , ongaku : Bool
    , insyokuari : Bool
    , undou : Bool
    , free : Bool
    }


{-| Type for the KayoinobaAttributesInput input object.
-}
type alias KayoinobaAttributesInput =
    { taisou : Bool
    , noutore : Bool
    , ongaku : Bool
    , insyokuari : Bool
    , undou : Bool
    , free : Bool
    }


{-| Encode a KayoinobaAttributesInput into a value that can be used as an argument.
-}
encodeKayoinobaAttributesInput : KayoinobaAttributesInput -> Value
encodeKayoinobaAttributesInput input____ =
    Encode.maybeObject
        [ ( "taisou", Encode.bool input____.taisou |> Just ), ( "noutore", Encode.bool input____.noutore |> Just ), ( "ongaku", Encode.bool input____.ongaku |> Just ), ( "insyokuari", Encode.bool input____.insyokuari |> Just ), ( "undou", Encode.bool input____.undou |> Just ), ( "free", Encode.bool input____.free |> Just ) ]


buildLocationInput :
    LocationInputRequiredFields
    -> LocationInput
buildLocationInput required____ =
    { latitude = required____.latitude, longitude = required____.longitude }


type alias LocationInputRequiredFields =
    { latitude : Float
    , longitude : Float
    }


{-| Type for the LocationInput input object.
-}
type alias LocationInput =
    { latitude : Float
    , longitude : Float
    }


{-| Encode a LocationInput into a value that can be used as an argument.
-}
encodeLocationInput : LocationInput -> Value
encodeLocationInput input____ =
    Encode.maybeObject
        [ ( "latitude", Encode.float input____.latitude |> Just ), ( "longitude", Encode.float input____.longitude |> Just ) ]


buildModelBooleanInput :
    (ModelBooleanInputOptionalFields -> ModelBooleanInputOptionalFields)
    -> ModelBooleanInput
buildModelBooleanInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, attributeExists = Absent, attributeType = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, attributeExists = optionals____.attributeExists, attributeType = optionals____.attributeType }


type alias ModelBooleanInputOptionalFields =
    { ne : OptionalArgument Bool
    , eq : OptionalArgument Bool
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    }


{-| Type for the ModelBooleanInput input object.
-}
type alias ModelBooleanInput =
    { ne : OptionalArgument Bool
    , eq : OptionalArgument Bool
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    }


{-| Encode a ModelBooleanInput into a value that can be used as an argument.
-}
encodeModelBooleanInput : ModelBooleanInput -> Value
encodeModelBooleanInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.bool |> Encode.optional input____.ne ), ( "eq", Encode.bool |> Encode.optional input____.eq ), ( "attributeExists", Encode.bool |> Encode.optional input____.attributeExists ), ( "attributeType", Encode.enum Api.Enum.ModelAttributeTypes.toString |> Encode.optional input____.attributeType ) ]


buildModelFloatInput :
    (ModelFloatInputOptionalFields -> ModelFloatInputOptionalFields)
    -> ModelFloatInput
buildModelFloatInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, between = Absent, attributeExists = Absent, attributeType = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, between = optionals____.between, attributeExists = optionals____.attributeExists, attributeType = optionals____.attributeType }


type alias ModelFloatInputOptionalFields =
    { ne : OptionalArgument Float
    , eq : OptionalArgument Float
    , le : OptionalArgument Float
    , lt : OptionalArgument Float
    , ge : OptionalArgument Float
    , gt : OptionalArgument Float
    , between : OptionalArgument (List (Maybe Float))
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    }


{-| Type for the ModelFloatInput input object.
-}
type alias ModelFloatInput =
    { ne : OptionalArgument Float
    , eq : OptionalArgument Float
    , le : OptionalArgument Float
    , lt : OptionalArgument Float
    , ge : OptionalArgument Float
    , gt : OptionalArgument Float
    , between : OptionalArgument (List (Maybe Float))
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    }


{-| Encode a ModelFloatInput into a value that can be used as an argument.
-}
encodeModelFloatInput : ModelFloatInput -> Value
encodeModelFloatInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.float |> Encode.optional input____.ne ), ( "eq", Encode.float |> Encode.optional input____.eq ), ( "le", Encode.float |> Encode.optional input____.le ), ( "lt", Encode.float |> Encode.optional input____.lt ), ( "ge", Encode.float |> Encode.optional input____.ge ), ( "gt", Encode.float |> Encode.optional input____.gt ), ( "between", (Encode.float |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "attributeExists", Encode.bool |> Encode.optional input____.attributeExists ), ( "attributeType", Encode.enum Api.Enum.ModelAttributeTypes.toString |> Encode.optional input____.attributeType ) ]


buildModelIDInput :
    (ModelIDInputOptionalFields -> ModelIDInputOptionalFields)
    -> ModelIDInput
buildModelIDInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, contains = Absent, notContains = Absent, between = Absent, beginsWith = Absent, attributeExists = Absent, attributeType = Absent, size = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, contains = optionals____.contains, notContains = optionals____.notContains, between = optionals____.between, beginsWith = optionals____.beginsWith, attributeExists = optionals____.attributeExists, attributeType = optionals____.attributeType, size = optionals____.size }


type alias ModelIDInputOptionalFields =
    { ne : OptionalArgument Api.ScalarCodecs.Id
    , eq : OptionalArgument Api.ScalarCodecs.Id
    , le : OptionalArgument Api.ScalarCodecs.Id
    , lt : OptionalArgument Api.ScalarCodecs.Id
    , ge : OptionalArgument Api.ScalarCodecs.Id
    , gt : OptionalArgument Api.ScalarCodecs.Id
    , contains : OptionalArgument Api.ScalarCodecs.Id
    , notContains : OptionalArgument Api.ScalarCodecs.Id
    , between : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    , beginsWith : OptionalArgument Api.ScalarCodecs.Id
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    , size : OptionalArgument ModelSizeInput
    }


{-| Type for the ModelIDInput input object.
-}
type alias ModelIDInput =
    { ne : OptionalArgument Api.ScalarCodecs.Id
    , eq : OptionalArgument Api.ScalarCodecs.Id
    , le : OptionalArgument Api.ScalarCodecs.Id
    , lt : OptionalArgument Api.ScalarCodecs.Id
    , ge : OptionalArgument Api.ScalarCodecs.Id
    , gt : OptionalArgument Api.ScalarCodecs.Id
    , contains : OptionalArgument Api.ScalarCodecs.Id
    , notContains : OptionalArgument Api.ScalarCodecs.Id
    , between : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    , beginsWith : OptionalArgument Api.ScalarCodecs.Id
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    , size : OptionalArgument ModelSizeInput
    }


{-| Encode a ModelIDInput into a value that can be used as an argument.
-}
encodeModelIDInput : ModelIDInput -> Value
encodeModelIDInput input____ =
    Encode.maybeObject
        [ ( "ne", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.ne ), ( "eq", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.eq ), ( "le", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.le ), ( "lt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.lt ), ( "ge", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.ge ), ( "gt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.gt ), ( "contains", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.contains ), ( "notContains", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.notContains ), ( "between", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "beginsWith", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.beginsWith ), ( "attributeExists", Encode.bool |> Encode.optional input____.attributeExists ), ( "attributeType", Encode.enum Api.Enum.ModelAttributeTypes.toString |> Encode.optional input____.attributeType ), ( "size", encodeModelSizeInput |> Encode.optional input____.size ) ]


buildModelIntInput :
    (ModelIntInputOptionalFields -> ModelIntInputOptionalFields)
    -> ModelIntInput
buildModelIntInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, between = Absent, attributeExists = Absent, attributeType = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, between = optionals____.between, attributeExists = optionals____.attributeExists, attributeType = optionals____.attributeType }


type alias ModelIntInputOptionalFields =
    { ne : OptionalArgument Int
    , eq : OptionalArgument Int
    , le : OptionalArgument Int
    , lt : OptionalArgument Int
    , ge : OptionalArgument Int
    , gt : OptionalArgument Int
    , between : OptionalArgument (List (Maybe Int))
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    }


{-| Type for the ModelIntInput input object.
-}
type alias ModelIntInput =
    { ne : OptionalArgument Int
    , eq : OptionalArgument Int
    , le : OptionalArgument Int
    , lt : OptionalArgument Int
    , ge : OptionalArgument Int
    , gt : OptionalArgument Int
    , between : OptionalArgument (List (Maybe Int))
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    }


{-| Encode a ModelIntInput into a value that can be used as an argument.
-}
encodeModelIntInput : ModelIntInput -> Value
encodeModelIntInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.int |> Encode.optional input____.ne ), ( "eq", Encode.int |> Encode.optional input____.eq ), ( "le", Encode.int |> Encode.optional input____.le ), ( "lt", Encode.int |> Encode.optional input____.lt ), ( "ge", Encode.int |> Encode.optional input____.ge ), ( "gt", Encode.int |> Encode.optional input____.gt ), ( "between", (Encode.int |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "attributeExists", Encode.bool |> Encode.optional input____.attributeExists ), ( "attributeType", Encode.enum Api.Enum.ModelAttributeTypes.toString |> Encode.optional input____.attributeType ) ]


buildModelKayoinobaConditionInput :
    (ModelKayoinobaConditionInputOptionalFields -> ModelKayoinobaConditionInputOptionalFields)
    -> ModelKayoinobaConditionInput
buildModelKayoinobaConditionInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent, yomigana = Absent, summary = Absent, price = Absent, target = Absent, contact = Absent, webSite = Absent, mapIdForSearch = Absent, and = Absent, or = Absent, not = Absent, kayoinobaPlaceId = Absent }
    in
    ModelKayoinobaConditionInput { name = optionals____.name, yomigana = optionals____.yomigana, summary = optionals____.summary, price = optionals____.price, target = optionals____.target, contact = optionals____.contact, webSite = optionals____.webSite, mapIdForSearch = optionals____.mapIdForSearch, and = optionals____.and, or = optionals____.or, not = optionals____.not, kayoinobaPlaceId = optionals____.kayoinobaPlaceId }


type alias ModelKayoinobaConditionInputOptionalFields =
    { name : OptionalArgument ModelStringInput
    , yomigana : OptionalArgument ModelStringInput
    , summary : OptionalArgument ModelStringInput
    , price : OptionalArgument ModelIntInput
    , target : OptionalArgument ModelStringInput
    , contact : OptionalArgument ModelStringInput
    , webSite : OptionalArgument ModelStringInput
    , mapIdForSearch : OptionalArgument ModelIDInput
    , and : OptionalArgument (List (Maybe ModelKayoinobaConditionInput))
    , or : OptionalArgument (List (Maybe ModelKayoinobaConditionInput))
    , not : OptionalArgument ModelKayoinobaConditionInput
    , kayoinobaPlaceId : OptionalArgument ModelIDInput
    }


{-| Type alias for the `ModelKayoinobaConditionInput` attributes. Note that this type
needs to use the `ModelKayoinobaConditionInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ModelKayoinobaConditionInputRaw =
    { name : OptionalArgument ModelStringInput
    , yomigana : OptionalArgument ModelStringInput
    , summary : OptionalArgument ModelStringInput
    , price : OptionalArgument ModelIntInput
    , target : OptionalArgument ModelStringInput
    , contact : OptionalArgument ModelStringInput
    , webSite : OptionalArgument ModelStringInput
    , mapIdForSearch : OptionalArgument ModelIDInput
    , and : OptionalArgument (List (Maybe ModelKayoinobaConditionInput))
    , or : OptionalArgument (List (Maybe ModelKayoinobaConditionInput))
    , not : OptionalArgument ModelKayoinobaConditionInput
    , kayoinobaPlaceId : OptionalArgument ModelIDInput
    }


{-| Type for the ModelKayoinobaConditionInput input object.
-}
type ModelKayoinobaConditionInput
    = ModelKayoinobaConditionInput ModelKayoinobaConditionInputRaw


{-| Encode a ModelKayoinobaConditionInput into a value that can be used as an argument.
-}
encodeModelKayoinobaConditionInput : ModelKayoinobaConditionInput -> Value
encodeModelKayoinobaConditionInput (ModelKayoinobaConditionInput input____) =
    Encode.maybeObject
        [ ( "name", encodeModelStringInput |> Encode.optional input____.name ), ( "yomigana", encodeModelStringInput |> Encode.optional input____.yomigana ), ( "summary", encodeModelStringInput |> Encode.optional input____.summary ), ( "price", encodeModelIntInput |> Encode.optional input____.price ), ( "target", encodeModelStringInput |> Encode.optional input____.target ), ( "contact", encodeModelStringInput |> Encode.optional input____.contact ), ( "webSite", encodeModelStringInput |> Encode.optional input____.webSite ), ( "mapIdForSearch", encodeModelIDInput |> Encode.optional input____.mapIdForSearch ), ( "and", (encodeModelKayoinobaConditionInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.and ), ( "or", (encodeModelKayoinobaConditionInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.or ), ( "not", encodeModelKayoinobaConditionInput |> Encode.optional input____.not ), ( "kayoinobaPlaceId", encodeModelIDInput |> Encode.optional input____.kayoinobaPlaceId ) ]


buildModelKayoinobaFilterInput :
    (ModelKayoinobaFilterInputOptionalFields -> ModelKayoinobaFilterInputOptionalFields)
    -> ModelKayoinobaFilterInput
buildModelKayoinobaFilterInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, name = Absent, yomigana = Absent, summary = Absent, price = Absent, target = Absent, contact = Absent, webSite = Absent, mapIdForSearch = Absent, and = Absent, or = Absent, not = Absent, kayoinobaPlaceId = Absent }
    in
    ModelKayoinobaFilterInput { id = optionals____.id, name = optionals____.name, yomigana = optionals____.yomigana, summary = optionals____.summary, price = optionals____.price, target = optionals____.target, contact = optionals____.contact, webSite = optionals____.webSite, mapIdForSearch = optionals____.mapIdForSearch, and = optionals____.and, or = optionals____.or, not = optionals____.not, kayoinobaPlaceId = optionals____.kayoinobaPlaceId }


type alias ModelKayoinobaFilterInputOptionalFields =
    { id : OptionalArgument ModelIDInput
    , name : OptionalArgument ModelStringInput
    , yomigana : OptionalArgument ModelStringInput
    , summary : OptionalArgument ModelStringInput
    , price : OptionalArgument ModelIntInput
    , target : OptionalArgument ModelStringInput
    , contact : OptionalArgument ModelStringInput
    , webSite : OptionalArgument ModelStringInput
    , mapIdForSearch : OptionalArgument ModelIDInput
    , and : OptionalArgument (List (Maybe ModelKayoinobaFilterInput))
    , or : OptionalArgument (List (Maybe ModelKayoinobaFilterInput))
    , not : OptionalArgument ModelKayoinobaFilterInput
    , kayoinobaPlaceId : OptionalArgument ModelIDInput
    }


{-| Type alias for the `ModelKayoinobaFilterInput` attributes. Note that this type
needs to use the `ModelKayoinobaFilterInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ModelKayoinobaFilterInputRaw =
    { id : OptionalArgument ModelIDInput
    , name : OptionalArgument ModelStringInput
    , yomigana : OptionalArgument ModelStringInput
    , summary : OptionalArgument ModelStringInput
    , price : OptionalArgument ModelIntInput
    , target : OptionalArgument ModelStringInput
    , contact : OptionalArgument ModelStringInput
    , webSite : OptionalArgument ModelStringInput
    , mapIdForSearch : OptionalArgument ModelIDInput
    , and : OptionalArgument (List (Maybe ModelKayoinobaFilterInput))
    , or : OptionalArgument (List (Maybe ModelKayoinobaFilterInput))
    , not : OptionalArgument ModelKayoinobaFilterInput
    , kayoinobaPlaceId : OptionalArgument ModelIDInput
    }


{-| Type for the ModelKayoinobaFilterInput input object.
-}
type ModelKayoinobaFilterInput
    = ModelKayoinobaFilterInput ModelKayoinobaFilterInputRaw


{-| Encode a ModelKayoinobaFilterInput into a value that can be used as an argument.
-}
encodeModelKayoinobaFilterInput : ModelKayoinobaFilterInput -> Value
encodeModelKayoinobaFilterInput (ModelKayoinobaFilterInput input____) =
    Encode.maybeObject
        [ ( "id", encodeModelIDInput |> Encode.optional input____.id ), ( "name", encodeModelStringInput |> Encode.optional input____.name ), ( "yomigana", encodeModelStringInput |> Encode.optional input____.yomigana ), ( "summary", encodeModelStringInput |> Encode.optional input____.summary ), ( "price", encodeModelIntInput |> Encode.optional input____.price ), ( "target", encodeModelStringInput |> Encode.optional input____.target ), ( "contact", encodeModelStringInput |> Encode.optional input____.contact ), ( "webSite", encodeModelStringInput |> Encode.optional input____.webSite ), ( "mapIdForSearch", encodeModelIDInput |> Encode.optional input____.mapIdForSearch ), ( "and", (encodeModelKayoinobaFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.and ), ( "or", (encodeModelKayoinobaFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.or ), ( "not", encodeModelKayoinobaFilterInput |> Encode.optional input____.not ), ( "kayoinobaPlaceId", encodeModelIDInput |> Encode.optional input____.kayoinobaPlaceId ) ]


buildModelMapConditionInput :
    (ModelMapConditionInputOptionalFields -> ModelMapConditionInputOptionalFields)
    -> ModelMapConditionInput
buildModelMapConditionInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent, title = Absent, topInformation = Absent, zoom = Absent, category1Name = Absent, category2Name = Absent, category3Name = Absent, and = Absent, or = Absent, not = Absent }
    in
    ModelMapConditionInput { name = optionals____.name, title = optionals____.title, topInformation = optionals____.topInformation, zoom = optionals____.zoom, category1Name = optionals____.category1Name, category2Name = optionals____.category2Name, category3Name = optionals____.category3Name, and = optionals____.and, or = optionals____.or, not = optionals____.not }


type alias ModelMapConditionInputOptionalFields =
    { name : OptionalArgument ModelStringInput
    , title : OptionalArgument ModelStringInput
    , topInformation : OptionalArgument ModelStringInput
    , zoom : OptionalArgument ModelIntInput
    , category1Name : OptionalArgument ModelStringInput
    , category2Name : OptionalArgument ModelStringInput
    , category3Name : OptionalArgument ModelStringInput
    , and : OptionalArgument (List (Maybe ModelMapConditionInput))
    , or : OptionalArgument (List (Maybe ModelMapConditionInput))
    , not : OptionalArgument ModelMapConditionInput
    }


{-| Type alias for the `ModelMapConditionInput` attributes. Note that this type
needs to use the `ModelMapConditionInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ModelMapConditionInputRaw =
    { name : OptionalArgument ModelStringInput
    , title : OptionalArgument ModelStringInput
    , topInformation : OptionalArgument ModelStringInput
    , zoom : OptionalArgument ModelIntInput
    , category1Name : OptionalArgument ModelStringInput
    , category2Name : OptionalArgument ModelStringInput
    , category3Name : OptionalArgument ModelStringInput
    , and : OptionalArgument (List (Maybe ModelMapConditionInput))
    , or : OptionalArgument (List (Maybe ModelMapConditionInput))
    , not : OptionalArgument ModelMapConditionInput
    }


{-| Type for the ModelMapConditionInput input object.
-}
type ModelMapConditionInput
    = ModelMapConditionInput ModelMapConditionInputRaw


{-| Encode a ModelMapConditionInput into a value that can be used as an argument.
-}
encodeModelMapConditionInput : ModelMapConditionInput -> Value
encodeModelMapConditionInput (ModelMapConditionInput input____) =
    Encode.maybeObject
        [ ( "name", encodeModelStringInput |> Encode.optional input____.name ), ( "title", encodeModelStringInput |> Encode.optional input____.title ), ( "topInformation", encodeModelStringInput |> Encode.optional input____.topInformation ), ( "zoom", encodeModelIntInput |> Encode.optional input____.zoom ), ( "category1Name", encodeModelStringInput |> Encode.optional input____.category1Name ), ( "category2Name", encodeModelStringInput |> Encode.optional input____.category2Name ), ( "category3Name", encodeModelStringInput |> Encode.optional input____.category3Name ), ( "and", (encodeModelMapConditionInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.and ), ( "or", (encodeModelMapConditionInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.or ), ( "not", encodeModelMapConditionInput |> Encode.optional input____.not ) ]


buildModelMapFilterInput :
    (ModelMapFilterInputOptionalFields -> ModelMapFilterInputOptionalFields)
    -> ModelMapFilterInput
buildModelMapFilterInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, name = Absent, title = Absent, topInformation = Absent, zoom = Absent, category1Name = Absent, category2Name = Absent, category3Name = Absent, and = Absent, or = Absent, not = Absent }
    in
    ModelMapFilterInput { id = optionals____.id, name = optionals____.name, title = optionals____.title, topInformation = optionals____.topInformation, zoom = optionals____.zoom, category1Name = optionals____.category1Name, category2Name = optionals____.category2Name, category3Name = optionals____.category3Name, and = optionals____.and, or = optionals____.or, not = optionals____.not }


type alias ModelMapFilterInputOptionalFields =
    { id : OptionalArgument ModelIDInput
    , name : OptionalArgument ModelStringInput
    , title : OptionalArgument ModelStringInput
    , topInformation : OptionalArgument ModelStringInput
    , zoom : OptionalArgument ModelIntInput
    , category1Name : OptionalArgument ModelStringInput
    , category2Name : OptionalArgument ModelStringInput
    , category3Name : OptionalArgument ModelStringInput
    , and : OptionalArgument (List (Maybe ModelMapFilterInput))
    , or : OptionalArgument (List (Maybe ModelMapFilterInput))
    , not : OptionalArgument ModelMapFilterInput
    }


{-| Type alias for the `ModelMapFilterInput` attributes. Note that this type
needs to use the `ModelMapFilterInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ModelMapFilterInputRaw =
    { id : OptionalArgument ModelIDInput
    , name : OptionalArgument ModelStringInput
    , title : OptionalArgument ModelStringInput
    , topInformation : OptionalArgument ModelStringInput
    , zoom : OptionalArgument ModelIntInput
    , category1Name : OptionalArgument ModelStringInput
    , category2Name : OptionalArgument ModelStringInput
    , category3Name : OptionalArgument ModelStringInput
    , and : OptionalArgument (List (Maybe ModelMapFilterInput))
    , or : OptionalArgument (List (Maybe ModelMapFilterInput))
    , not : OptionalArgument ModelMapFilterInput
    }


{-| Type for the ModelMapFilterInput input object.
-}
type ModelMapFilterInput
    = ModelMapFilterInput ModelMapFilterInputRaw


{-| Encode a ModelMapFilterInput into a value that can be used as an argument.
-}
encodeModelMapFilterInput : ModelMapFilterInput -> Value
encodeModelMapFilterInput (ModelMapFilterInput input____) =
    Encode.maybeObject
        [ ( "id", encodeModelIDInput |> Encode.optional input____.id ), ( "name", encodeModelStringInput |> Encode.optional input____.name ), ( "title", encodeModelStringInput |> Encode.optional input____.title ), ( "topInformation", encodeModelStringInput |> Encode.optional input____.topInformation ), ( "zoom", encodeModelIntInput |> Encode.optional input____.zoom ), ( "category1Name", encodeModelStringInput |> Encode.optional input____.category1Name ), ( "category2Name", encodeModelStringInput |> Encode.optional input____.category2Name ), ( "category3Name", encodeModelStringInput |> Encode.optional input____.category3Name ), ( "and", (encodeModelMapFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.and ), ( "or", (encodeModelMapFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.or ), ( "not", encodeModelMapFilterInput |> Encode.optional input____.not ) ]


buildModelPlaceCategoryInput :
    (ModelPlaceCategoryInputOptionalFields -> ModelPlaceCategoryInputOptionalFields)
    -> ModelPlaceCategoryInput
buildModelPlaceCategoryInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq = Absent, ne = Absent }
    in
    { eq = optionals____.eq, ne = optionals____.ne }


type alias ModelPlaceCategoryInputOptionalFields =
    { eq : OptionalArgument Api.Enum.PlaceCategory.PlaceCategory
    , ne : OptionalArgument Api.Enum.PlaceCategory.PlaceCategory
    }


{-| Type for the ModelPlaceCategoryInput input object.
-}
type alias ModelPlaceCategoryInput =
    { eq : OptionalArgument Api.Enum.PlaceCategory.PlaceCategory
    , ne : OptionalArgument Api.Enum.PlaceCategory.PlaceCategory
    }


{-| Encode a ModelPlaceCategoryInput into a value that can be used as an argument.
-}
encodeModelPlaceCategoryInput : ModelPlaceCategoryInput -> Value
encodeModelPlaceCategoryInput input____ =
    Encode.maybeObject
        [ ( "eq", Encode.enum Api.Enum.PlaceCategory.toString |> Encode.optional input____.eq ), ( "ne", Encode.enum Api.Enum.PlaceCategory.toString |> Encode.optional input____.ne ) ]


buildModelPlaceConditionInput :
    (ModelPlaceConditionInputOptionalFields -> ModelPlaceConditionInputOptionalFields)
    -> ModelPlaceConditionInput
buildModelPlaceConditionInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent, address = Absent, category = Absent, contact = Absent, hasImage = Absent, and = Absent, or = Absent, not = Absent, placeMapId = Absent }
    in
    ModelPlaceConditionInput { name = optionals____.name, address = optionals____.address, category = optionals____.category, contact = optionals____.contact, hasImage = optionals____.hasImage, and = optionals____.and, or = optionals____.or, not = optionals____.not, placeMapId = optionals____.placeMapId }


type alias ModelPlaceConditionInputOptionalFields =
    { name : OptionalArgument ModelStringInput
    , address : OptionalArgument ModelStringInput
    , category : OptionalArgument ModelPlaceCategoryInput
    , contact : OptionalArgument ModelStringInput
    , hasImage : OptionalArgument ModelBooleanInput
    , and : OptionalArgument (List (Maybe ModelPlaceConditionInput))
    , or : OptionalArgument (List (Maybe ModelPlaceConditionInput))
    , not : OptionalArgument ModelPlaceConditionInput
    , placeMapId : OptionalArgument ModelIDInput
    }


{-| Type alias for the `ModelPlaceConditionInput` attributes. Note that this type
needs to use the `ModelPlaceConditionInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ModelPlaceConditionInputRaw =
    { name : OptionalArgument ModelStringInput
    , address : OptionalArgument ModelStringInput
    , category : OptionalArgument ModelPlaceCategoryInput
    , contact : OptionalArgument ModelStringInput
    , hasImage : OptionalArgument ModelBooleanInput
    , and : OptionalArgument (List (Maybe ModelPlaceConditionInput))
    , or : OptionalArgument (List (Maybe ModelPlaceConditionInput))
    , not : OptionalArgument ModelPlaceConditionInput
    , placeMapId : OptionalArgument ModelIDInput
    }


{-| Type for the ModelPlaceConditionInput input object.
-}
type ModelPlaceConditionInput
    = ModelPlaceConditionInput ModelPlaceConditionInputRaw


{-| Encode a ModelPlaceConditionInput into a value that can be used as an argument.
-}
encodeModelPlaceConditionInput : ModelPlaceConditionInput -> Value
encodeModelPlaceConditionInput (ModelPlaceConditionInput input____) =
    Encode.maybeObject
        [ ( "name", encodeModelStringInput |> Encode.optional input____.name ), ( "address", encodeModelStringInput |> Encode.optional input____.address ), ( "category", encodeModelPlaceCategoryInput |> Encode.optional input____.category ), ( "contact", encodeModelStringInput |> Encode.optional input____.contact ), ( "hasImage", encodeModelBooleanInput |> Encode.optional input____.hasImage ), ( "and", (encodeModelPlaceConditionInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.and ), ( "or", (encodeModelPlaceConditionInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.or ), ( "not", encodeModelPlaceConditionInput |> Encode.optional input____.not ), ( "placeMapId", encodeModelIDInput |> Encode.optional input____.placeMapId ) ]


buildModelPlaceFilterInput :
    (ModelPlaceFilterInputOptionalFields -> ModelPlaceFilterInputOptionalFields)
    -> ModelPlaceFilterInput
buildModelPlaceFilterInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, name = Absent, address = Absent, category = Absent, contact = Absent, hasImage = Absent, and = Absent, or = Absent, not = Absent, placeMapId = Absent }
    in
    ModelPlaceFilterInput { id = optionals____.id, name = optionals____.name, address = optionals____.address, category = optionals____.category, contact = optionals____.contact, hasImage = optionals____.hasImage, and = optionals____.and, or = optionals____.or, not = optionals____.not, placeMapId = optionals____.placeMapId }


type alias ModelPlaceFilterInputOptionalFields =
    { id : OptionalArgument ModelIDInput
    , name : OptionalArgument ModelStringInput
    , address : OptionalArgument ModelStringInput
    , category : OptionalArgument ModelPlaceCategoryInput
    , contact : OptionalArgument ModelStringInput
    , hasImage : OptionalArgument ModelBooleanInput
    , and : OptionalArgument (List (Maybe ModelPlaceFilterInput))
    , or : OptionalArgument (List (Maybe ModelPlaceFilterInput))
    , not : OptionalArgument ModelPlaceFilterInput
    , placeMapId : OptionalArgument ModelIDInput
    }


{-| Type alias for the `ModelPlaceFilterInput` attributes. Note that this type
needs to use the `ModelPlaceFilterInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ModelPlaceFilterInputRaw =
    { id : OptionalArgument ModelIDInput
    , name : OptionalArgument ModelStringInput
    , address : OptionalArgument ModelStringInput
    , category : OptionalArgument ModelPlaceCategoryInput
    , contact : OptionalArgument ModelStringInput
    , hasImage : OptionalArgument ModelBooleanInput
    , and : OptionalArgument (List (Maybe ModelPlaceFilterInput))
    , or : OptionalArgument (List (Maybe ModelPlaceFilterInput))
    , not : OptionalArgument ModelPlaceFilterInput
    , placeMapId : OptionalArgument ModelIDInput
    }


{-| Type for the ModelPlaceFilterInput input object.
-}
type ModelPlaceFilterInput
    = ModelPlaceFilterInput ModelPlaceFilterInputRaw


{-| Encode a ModelPlaceFilterInput into a value that can be used as an argument.
-}
encodeModelPlaceFilterInput : ModelPlaceFilterInput -> Value
encodeModelPlaceFilterInput (ModelPlaceFilterInput input____) =
    Encode.maybeObject
        [ ( "id", encodeModelIDInput |> Encode.optional input____.id ), ( "name", encodeModelStringInput |> Encode.optional input____.name ), ( "address", encodeModelStringInput |> Encode.optional input____.address ), ( "category", encodeModelPlaceCategoryInput |> Encode.optional input____.category ), ( "contact", encodeModelStringInput |> Encode.optional input____.contact ), ( "hasImage", encodeModelBooleanInput |> Encode.optional input____.hasImage ), ( "and", (encodeModelPlaceFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.and ), ( "or", (encodeModelPlaceFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.or ), ( "not", encodeModelPlaceFilterInput |> Encode.optional input____.not ), ( "placeMapId", encodeModelIDInput |> Encode.optional input____.placeMapId ) ]


buildModelSizeInput :
    (ModelSizeInputOptionalFields -> ModelSizeInputOptionalFields)
    -> ModelSizeInput
buildModelSizeInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, between = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, between = optionals____.between }


type alias ModelSizeInputOptionalFields =
    { ne : OptionalArgument Int
    , eq : OptionalArgument Int
    , le : OptionalArgument Int
    , lt : OptionalArgument Int
    , ge : OptionalArgument Int
    , gt : OptionalArgument Int
    , between : OptionalArgument (List (Maybe Int))
    }


{-| Type for the ModelSizeInput input object.
-}
type alias ModelSizeInput =
    { ne : OptionalArgument Int
    , eq : OptionalArgument Int
    , le : OptionalArgument Int
    , lt : OptionalArgument Int
    , ge : OptionalArgument Int
    , gt : OptionalArgument Int
    , between : OptionalArgument (List (Maybe Int))
    }


{-| Encode a ModelSizeInput into a value that can be used as an argument.
-}
encodeModelSizeInput : ModelSizeInput -> Value
encodeModelSizeInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.int |> Encode.optional input____.ne ), ( "eq", Encode.int |> Encode.optional input____.eq ), ( "le", Encode.int |> Encode.optional input____.le ), ( "lt", Encode.int |> Encode.optional input____.lt ), ( "ge", Encode.int |> Encode.optional input____.ge ), ( "gt", Encode.int |> Encode.optional input____.gt ), ( "between", (Encode.int |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ) ]


buildModelStringInput :
    (ModelStringInputOptionalFields -> ModelStringInputOptionalFields)
    -> ModelStringInput
buildModelStringInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, contains = Absent, notContains = Absent, between = Absent, beginsWith = Absent, attributeExists = Absent, attributeType = Absent, size = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, contains = optionals____.contains, notContains = optionals____.notContains, between = optionals____.between, beginsWith = optionals____.beginsWith, attributeExists = optionals____.attributeExists, attributeType = optionals____.attributeType, size = optionals____.size }


type alias ModelStringInputOptionalFields =
    { ne : OptionalArgument String
    , eq : OptionalArgument String
    , le : OptionalArgument String
    , lt : OptionalArgument String
    , ge : OptionalArgument String
    , gt : OptionalArgument String
    , contains : OptionalArgument String
    , notContains : OptionalArgument String
    , between : OptionalArgument (List (Maybe String))
    , beginsWith : OptionalArgument String
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    , size : OptionalArgument ModelSizeInput
    }


{-| Type for the ModelStringInput input object.
-}
type alias ModelStringInput =
    { ne : OptionalArgument String
    , eq : OptionalArgument String
    , le : OptionalArgument String
    , lt : OptionalArgument String
    , ge : OptionalArgument String
    , gt : OptionalArgument String
    , contains : OptionalArgument String
    , notContains : OptionalArgument String
    , between : OptionalArgument (List (Maybe String))
    , beginsWith : OptionalArgument String
    , attributeExists : OptionalArgument Bool
    , attributeType : OptionalArgument Api.Enum.ModelAttributeTypes.ModelAttributeTypes
    , size : OptionalArgument ModelSizeInput
    }


{-| Encode a ModelStringInput into a value that can be used as an argument.
-}
encodeModelStringInput : ModelStringInput -> Value
encodeModelStringInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.string |> Encode.optional input____.ne ), ( "eq", Encode.string |> Encode.optional input____.eq ), ( "le", Encode.string |> Encode.optional input____.le ), ( "lt", Encode.string |> Encode.optional input____.lt ), ( "ge", Encode.string |> Encode.optional input____.ge ), ( "gt", Encode.string |> Encode.optional input____.gt ), ( "contains", Encode.string |> Encode.optional input____.contains ), ( "notContains", Encode.string |> Encode.optional input____.notContains ), ( "between", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "beginsWith", Encode.string |> Encode.optional input____.beginsWith ), ( "attributeExists", Encode.bool |> Encode.optional input____.attributeExists ), ( "attributeType", Encode.enum Api.Enum.ModelAttributeTypes.toString |> Encode.optional input____.attributeType ), ( "size", encodeModelSizeInput |> Encode.optional input____.size ) ]


buildModelSubscriptionBooleanInput :
    (ModelSubscriptionBooleanInputOptionalFields -> ModelSubscriptionBooleanInputOptionalFields)
    -> ModelSubscriptionBooleanInput
buildModelSubscriptionBooleanInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq }


type alias ModelSubscriptionBooleanInputOptionalFields =
    { ne : OptionalArgument Bool
    , eq : OptionalArgument Bool
    }


{-| Type for the ModelSubscriptionBooleanInput input object.
-}
type alias ModelSubscriptionBooleanInput =
    { ne : OptionalArgument Bool
    , eq : OptionalArgument Bool
    }


{-| Encode a ModelSubscriptionBooleanInput into a value that can be used as an argument.
-}
encodeModelSubscriptionBooleanInput : ModelSubscriptionBooleanInput -> Value
encodeModelSubscriptionBooleanInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.bool |> Encode.optional input____.ne ), ( "eq", Encode.bool |> Encode.optional input____.eq ) ]


buildModelSubscriptionFloatInput :
    (ModelSubscriptionFloatInputOptionalFields -> ModelSubscriptionFloatInputOptionalFields)
    -> ModelSubscriptionFloatInput
buildModelSubscriptionFloatInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, between = Absent, in_ = Absent, notIn = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, between = optionals____.between, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias ModelSubscriptionFloatInputOptionalFields =
    { ne : OptionalArgument Float
    , eq : OptionalArgument Float
    , le : OptionalArgument Float
    , lt : OptionalArgument Float
    , ge : OptionalArgument Float
    , gt : OptionalArgument Float
    , between : OptionalArgument (List (Maybe Float))
    , in_ : OptionalArgument (List (Maybe Float))
    , notIn : OptionalArgument (List (Maybe Float))
    }


{-| Type for the ModelSubscriptionFloatInput input object.
-}
type alias ModelSubscriptionFloatInput =
    { ne : OptionalArgument Float
    , eq : OptionalArgument Float
    , le : OptionalArgument Float
    , lt : OptionalArgument Float
    , ge : OptionalArgument Float
    , gt : OptionalArgument Float
    , between : OptionalArgument (List (Maybe Float))
    , in_ : OptionalArgument (List (Maybe Float))
    , notIn : OptionalArgument (List (Maybe Float))
    }


{-| Encode a ModelSubscriptionFloatInput into a value that can be used as an argument.
-}
encodeModelSubscriptionFloatInput : ModelSubscriptionFloatInput -> Value
encodeModelSubscriptionFloatInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.float |> Encode.optional input____.ne ), ( "eq", Encode.float |> Encode.optional input____.eq ), ( "le", Encode.float |> Encode.optional input____.le ), ( "lt", Encode.float |> Encode.optional input____.lt ), ( "ge", Encode.float |> Encode.optional input____.ge ), ( "gt", Encode.float |> Encode.optional input____.gt ), ( "between", (Encode.float |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "in", (Encode.float |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.float |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildModelSubscriptionIDInput :
    (ModelSubscriptionIDInputOptionalFields -> ModelSubscriptionIDInputOptionalFields)
    -> ModelSubscriptionIDInput
buildModelSubscriptionIDInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, contains = Absent, notContains = Absent, between = Absent, beginsWith = Absent, in_ = Absent, notIn = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, contains = optionals____.contains, notContains = optionals____.notContains, between = optionals____.between, beginsWith = optionals____.beginsWith, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias ModelSubscriptionIDInputOptionalFields =
    { ne : OptionalArgument Api.ScalarCodecs.Id
    , eq : OptionalArgument Api.ScalarCodecs.Id
    , le : OptionalArgument Api.ScalarCodecs.Id
    , lt : OptionalArgument Api.ScalarCodecs.Id
    , ge : OptionalArgument Api.ScalarCodecs.Id
    , gt : OptionalArgument Api.ScalarCodecs.Id
    , contains : OptionalArgument Api.ScalarCodecs.Id
    , notContains : OptionalArgument Api.ScalarCodecs.Id
    , between : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    , beginsWith : OptionalArgument Api.ScalarCodecs.Id
    , in_ : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    , notIn : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    }


{-| Type for the ModelSubscriptionIDInput input object.
-}
type alias ModelSubscriptionIDInput =
    { ne : OptionalArgument Api.ScalarCodecs.Id
    , eq : OptionalArgument Api.ScalarCodecs.Id
    , le : OptionalArgument Api.ScalarCodecs.Id
    , lt : OptionalArgument Api.ScalarCodecs.Id
    , ge : OptionalArgument Api.ScalarCodecs.Id
    , gt : OptionalArgument Api.ScalarCodecs.Id
    , contains : OptionalArgument Api.ScalarCodecs.Id
    , notContains : OptionalArgument Api.ScalarCodecs.Id
    , between : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    , beginsWith : OptionalArgument Api.ScalarCodecs.Id
    , in_ : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    , notIn : OptionalArgument (List (Maybe Api.ScalarCodecs.Id))
    }


{-| Encode a ModelSubscriptionIDInput into a value that can be used as an argument.
-}
encodeModelSubscriptionIDInput : ModelSubscriptionIDInput -> Value
encodeModelSubscriptionIDInput input____ =
    Encode.maybeObject
        [ ( "ne", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.ne ), ( "eq", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.eq ), ( "le", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.le ), ( "lt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.lt ), ( "ge", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.ge ), ( "gt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.gt ), ( "contains", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.contains ), ( "notContains", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.notContains ), ( "between", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "beginsWith", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.beginsWith ), ( "in", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildModelSubscriptionIntInput :
    (ModelSubscriptionIntInputOptionalFields -> ModelSubscriptionIntInputOptionalFields)
    -> ModelSubscriptionIntInput
buildModelSubscriptionIntInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, between = Absent, in_ = Absent, notIn = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, between = optionals____.between, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias ModelSubscriptionIntInputOptionalFields =
    { ne : OptionalArgument Int
    , eq : OptionalArgument Int
    , le : OptionalArgument Int
    , lt : OptionalArgument Int
    , ge : OptionalArgument Int
    , gt : OptionalArgument Int
    , between : OptionalArgument (List (Maybe Int))
    , in_ : OptionalArgument (List (Maybe Int))
    , notIn : OptionalArgument (List (Maybe Int))
    }


{-| Type for the ModelSubscriptionIntInput input object.
-}
type alias ModelSubscriptionIntInput =
    { ne : OptionalArgument Int
    , eq : OptionalArgument Int
    , le : OptionalArgument Int
    , lt : OptionalArgument Int
    , ge : OptionalArgument Int
    , gt : OptionalArgument Int
    , between : OptionalArgument (List (Maybe Int))
    , in_ : OptionalArgument (List (Maybe Int))
    , notIn : OptionalArgument (List (Maybe Int))
    }


{-| Encode a ModelSubscriptionIntInput into a value that can be used as an argument.
-}
encodeModelSubscriptionIntInput : ModelSubscriptionIntInput -> Value
encodeModelSubscriptionIntInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.int |> Encode.optional input____.ne ), ( "eq", Encode.int |> Encode.optional input____.eq ), ( "le", Encode.int |> Encode.optional input____.le ), ( "lt", Encode.int |> Encode.optional input____.lt ), ( "ge", Encode.int |> Encode.optional input____.ge ), ( "gt", Encode.int |> Encode.optional input____.gt ), ( "between", (Encode.int |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "in", (Encode.int |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.int |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildModelSubscriptionKayoinobaFilterInput :
    (ModelSubscriptionKayoinobaFilterInputOptionalFields -> ModelSubscriptionKayoinobaFilterInputOptionalFields)
    -> ModelSubscriptionKayoinobaFilterInput
buildModelSubscriptionKayoinobaFilterInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, name = Absent, yomigana = Absent, summary = Absent, price = Absent, target = Absent, contact = Absent, webSite = Absent, mapIdForSearch = Absent, and = Absent, or = Absent }
    in
    ModelSubscriptionKayoinobaFilterInput { id = optionals____.id, name = optionals____.name, yomigana = optionals____.yomigana, summary = optionals____.summary, price = optionals____.price, target = optionals____.target, contact = optionals____.contact, webSite = optionals____.webSite, mapIdForSearch = optionals____.mapIdForSearch, and = optionals____.and, or = optionals____.or }


type alias ModelSubscriptionKayoinobaFilterInputOptionalFields =
    { id : OptionalArgument ModelSubscriptionIDInput
    , name : OptionalArgument ModelSubscriptionStringInput
    , yomigana : OptionalArgument ModelSubscriptionStringInput
    , summary : OptionalArgument ModelSubscriptionStringInput
    , price : OptionalArgument ModelSubscriptionIntInput
    , target : OptionalArgument ModelSubscriptionStringInput
    , contact : OptionalArgument ModelSubscriptionStringInput
    , webSite : OptionalArgument ModelSubscriptionStringInput
    , mapIdForSearch : OptionalArgument ModelSubscriptionIDInput
    , and : OptionalArgument (List (Maybe ModelSubscriptionKayoinobaFilterInput))
    , or : OptionalArgument (List (Maybe ModelSubscriptionKayoinobaFilterInput))
    }


{-| Type alias for the `ModelSubscriptionKayoinobaFilterInput` attributes. Note that this type
needs to use the `ModelSubscriptionKayoinobaFilterInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ModelSubscriptionKayoinobaFilterInputRaw =
    { id : OptionalArgument ModelSubscriptionIDInput
    , name : OptionalArgument ModelSubscriptionStringInput
    , yomigana : OptionalArgument ModelSubscriptionStringInput
    , summary : OptionalArgument ModelSubscriptionStringInput
    , price : OptionalArgument ModelSubscriptionIntInput
    , target : OptionalArgument ModelSubscriptionStringInput
    , contact : OptionalArgument ModelSubscriptionStringInput
    , webSite : OptionalArgument ModelSubscriptionStringInput
    , mapIdForSearch : OptionalArgument ModelSubscriptionIDInput
    , and : OptionalArgument (List (Maybe ModelSubscriptionKayoinobaFilterInput))
    , or : OptionalArgument (List (Maybe ModelSubscriptionKayoinobaFilterInput))
    }


{-| Type for the ModelSubscriptionKayoinobaFilterInput input object.
-}
type ModelSubscriptionKayoinobaFilterInput
    = ModelSubscriptionKayoinobaFilterInput ModelSubscriptionKayoinobaFilterInputRaw


{-| Encode a ModelSubscriptionKayoinobaFilterInput into a value that can be used as an argument.
-}
encodeModelSubscriptionKayoinobaFilterInput : ModelSubscriptionKayoinobaFilterInput -> Value
encodeModelSubscriptionKayoinobaFilterInput (ModelSubscriptionKayoinobaFilterInput input____) =
    Encode.maybeObject
        [ ( "id", encodeModelSubscriptionIDInput |> Encode.optional input____.id ), ( "name", encodeModelSubscriptionStringInput |> Encode.optional input____.name ), ( "yomigana", encodeModelSubscriptionStringInput |> Encode.optional input____.yomigana ), ( "summary", encodeModelSubscriptionStringInput |> Encode.optional input____.summary ), ( "price", encodeModelSubscriptionIntInput |> Encode.optional input____.price ), ( "target", encodeModelSubscriptionStringInput |> Encode.optional input____.target ), ( "contact", encodeModelSubscriptionStringInput |> Encode.optional input____.contact ), ( "webSite", encodeModelSubscriptionStringInput |> Encode.optional input____.webSite ), ( "mapIdForSearch", encodeModelSubscriptionIDInput |> Encode.optional input____.mapIdForSearch ), ( "and", (encodeModelSubscriptionKayoinobaFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.and ), ( "or", (encodeModelSubscriptionKayoinobaFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.or ) ]


buildModelSubscriptionMapFilterInput :
    (ModelSubscriptionMapFilterInputOptionalFields -> ModelSubscriptionMapFilterInputOptionalFields)
    -> ModelSubscriptionMapFilterInput
buildModelSubscriptionMapFilterInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, name = Absent, title = Absent, topInformation = Absent, zoom = Absent, category1Name = Absent, category2Name = Absent, category3Name = Absent, and = Absent, or = Absent }
    in
    ModelSubscriptionMapFilterInput { id = optionals____.id, name = optionals____.name, title = optionals____.title, topInformation = optionals____.topInformation, zoom = optionals____.zoom, category1Name = optionals____.category1Name, category2Name = optionals____.category2Name, category3Name = optionals____.category3Name, and = optionals____.and, or = optionals____.or }


type alias ModelSubscriptionMapFilterInputOptionalFields =
    { id : OptionalArgument ModelSubscriptionIDInput
    , name : OptionalArgument ModelSubscriptionStringInput
    , title : OptionalArgument ModelSubscriptionStringInput
    , topInformation : OptionalArgument ModelSubscriptionStringInput
    , zoom : OptionalArgument ModelSubscriptionIntInput
    , category1Name : OptionalArgument ModelSubscriptionStringInput
    , category2Name : OptionalArgument ModelSubscriptionStringInput
    , category3Name : OptionalArgument ModelSubscriptionStringInput
    , and : OptionalArgument (List (Maybe ModelSubscriptionMapFilterInput))
    , or : OptionalArgument (List (Maybe ModelSubscriptionMapFilterInput))
    }


{-| Type alias for the `ModelSubscriptionMapFilterInput` attributes. Note that this type
needs to use the `ModelSubscriptionMapFilterInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ModelSubscriptionMapFilterInputRaw =
    { id : OptionalArgument ModelSubscriptionIDInput
    , name : OptionalArgument ModelSubscriptionStringInput
    , title : OptionalArgument ModelSubscriptionStringInput
    , topInformation : OptionalArgument ModelSubscriptionStringInput
    , zoom : OptionalArgument ModelSubscriptionIntInput
    , category1Name : OptionalArgument ModelSubscriptionStringInput
    , category2Name : OptionalArgument ModelSubscriptionStringInput
    , category3Name : OptionalArgument ModelSubscriptionStringInput
    , and : OptionalArgument (List (Maybe ModelSubscriptionMapFilterInput))
    , or : OptionalArgument (List (Maybe ModelSubscriptionMapFilterInput))
    }


{-| Type for the ModelSubscriptionMapFilterInput input object.
-}
type ModelSubscriptionMapFilterInput
    = ModelSubscriptionMapFilterInput ModelSubscriptionMapFilterInputRaw


{-| Encode a ModelSubscriptionMapFilterInput into a value that can be used as an argument.
-}
encodeModelSubscriptionMapFilterInput : ModelSubscriptionMapFilterInput -> Value
encodeModelSubscriptionMapFilterInput (ModelSubscriptionMapFilterInput input____) =
    Encode.maybeObject
        [ ( "id", encodeModelSubscriptionIDInput |> Encode.optional input____.id ), ( "name", encodeModelSubscriptionStringInput |> Encode.optional input____.name ), ( "title", encodeModelSubscriptionStringInput |> Encode.optional input____.title ), ( "topInformation", encodeModelSubscriptionStringInput |> Encode.optional input____.topInformation ), ( "zoom", encodeModelSubscriptionIntInput |> Encode.optional input____.zoom ), ( "category1Name", encodeModelSubscriptionStringInput |> Encode.optional input____.category1Name ), ( "category2Name", encodeModelSubscriptionStringInput |> Encode.optional input____.category2Name ), ( "category3Name", encodeModelSubscriptionStringInput |> Encode.optional input____.category3Name ), ( "and", (encodeModelSubscriptionMapFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.and ), ( "or", (encodeModelSubscriptionMapFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.or ) ]


buildModelSubscriptionPlaceFilterInput :
    (ModelSubscriptionPlaceFilterInputOptionalFields -> ModelSubscriptionPlaceFilterInputOptionalFields)
    -> ModelSubscriptionPlaceFilterInput
buildModelSubscriptionPlaceFilterInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, name = Absent, address = Absent, category = Absent, contact = Absent, hasImage = Absent, and = Absent, or = Absent }
    in
    ModelSubscriptionPlaceFilterInput { id = optionals____.id, name = optionals____.name, address = optionals____.address, category = optionals____.category, contact = optionals____.contact, hasImage = optionals____.hasImage, and = optionals____.and, or = optionals____.or }


type alias ModelSubscriptionPlaceFilterInputOptionalFields =
    { id : OptionalArgument ModelSubscriptionIDInput
    , name : OptionalArgument ModelSubscriptionStringInput
    , address : OptionalArgument ModelSubscriptionStringInput
    , category : OptionalArgument ModelSubscriptionStringInput
    , contact : OptionalArgument ModelSubscriptionStringInput
    , hasImage : OptionalArgument ModelSubscriptionBooleanInput
    , and : OptionalArgument (List (Maybe ModelSubscriptionPlaceFilterInput))
    , or : OptionalArgument (List (Maybe ModelSubscriptionPlaceFilterInput))
    }


{-| Type alias for the `ModelSubscriptionPlaceFilterInput` attributes. Note that this type
needs to use the `ModelSubscriptionPlaceFilterInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ModelSubscriptionPlaceFilterInputRaw =
    { id : OptionalArgument ModelSubscriptionIDInput
    , name : OptionalArgument ModelSubscriptionStringInput
    , address : OptionalArgument ModelSubscriptionStringInput
    , category : OptionalArgument ModelSubscriptionStringInput
    , contact : OptionalArgument ModelSubscriptionStringInput
    , hasImage : OptionalArgument ModelSubscriptionBooleanInput
    , and : OptionalArgument (List (Maybe ModelSubscriptionPlaceFilterInput))
    , or : OptionalArgument (List (Maybe ModelSubscriptionPlaceFilterInput))
    }


{-| Type for the ModelSubscriptionPlaceFilterInput input object.
-}
type ModelSubscriptionPlaceFilterInput
    = ModelSubscriptionPlaceFilterInput ModelSubscriptionPlaceFilterInputRaw


{-| Encode a ModelSubscriptionPlaceFilterInput into a value that can be used as an argument.
-}
encodeModelSubscriptionPlaceFilterInput : ModelSubscriptionPlaceFilterInput -> Value
encodeModelSubscriptionPlaceFilterInput (ModelSubscriptionPlaceFilterInput input____) =
    Encode.maybeObject
        [ ( "id", encodeModelSubscriptionIDInput |> Encode.optional input____.id ), ( "name", encodeModelSubscriptionStringInput |> Encode.optional input____.name ), ( "address", encodeModelSubscriptionStringInput |> Encode.optional input____.address ), ( "category", encodeModelSubscriptionStringInput |> Encode.optional input____.category ), ( "contact", encodeModelSubscriptionStringInput |> Encode.optional input____.contact ), ( "hasImage", encodeModelSubscriptionBooleanInput |> Encode.optional input____.hasImage ), ( "and", (encodeModelSubscriptionPlaceFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.and ), ( "or", (encodeModelSubscriptionPlaceFilterInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.or ) ]


buildModelSubscriptionStringInput :
    (ModelSubscriptionStringInputOptionalFields -> ModelSubscriptionStringInputOptionalFields)
    -> ModelSubscriptionStringInput
buildModelSubscriptionStringInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ne = Absent, eq = Absent, le = Absent, lt = Absent, ge = Absent, gt = Absent, contains = Absent, notContains = Absent, between = Absent, beginsWith = Absent, in_ = Absent, notIn = Absent }
    in
    { ne = optionals____.ne, eq = optionals____.eq, le = optionals____.le, lt = optionals____.lt, ge = optionals____.ge, gt = optionals____.gt, contains = optionals____.contains, notContains = optionals____.notContains, between = optionals____.between, beginsWith = optionals____.beginsWith, in_ = optionals____.in_, notIn = optionals____.notIn }


type alias ModelSubscriptionStringInputOptionalFields =
    { ne : OptionalArgument String
    , eq : OptionalArgument String
    , le : OptionalArgument String
    , lt : OptionalArgument String
    , ge : OptionalArgument String
    , gt : OptionalArgument String
    , contains : OptionalArgument String
    , notContains : OptionalArgument String
    , between : OptionalArgument (List (Maybe String))
    , beginsWith : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    }


{-| Type for the ModelSubscriptionStringInput input object.
-}
type alias ModelSubscriptionStringInput =
    { ne : OptionalArgument String
    , eq : OptionalArgument String
    , le : OptionalArgument String
    , lt : OptionalArgument String
    , ge : OptionalArgument String
    , gt : OptionalArgument String
    , contains : OptionalArgument String
    , notContains : OptionalArgument String
    , between : OptionalArgument (List (Maybe String))
    , beginsWith : OptionalArgument String
    , in_ : OptionalArgument (List (Maybe String))
    , notIn : OptionalArgument (List (Maybe String))
    }


{-| Encode a ModelSubscriptionStringInput into a value that can be used as an argument.
-}
encodeModelSubscriptionStringInput : ModelSubscriptionStringInput -> Value
encodeModelSubscriptionStringInput input____ =
    Encode.maybeObject
        [ ( "ne", Encode.string |> Encode.optional input____.ne ), ( "eq", Encode.string |> Encode.optional input____.eq ), ( "le", Encode.string |> Encode.optional input____.le ), ( "lt", Encode.string |> Encode.optional input____.lt ), ( "ge", Encode.string |> Encode.optional input____.ge ), ( "gt", Encode.string |> Encode.optional input____.gt ), ( "contains", Encode.string |> Encode.optional input____.contains ), ( "notContains", Encode.string |> Encode.optional input____.notContains ), ( "between", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.between ), ( "beginsWith", Encode.string |> Encode.optional input____.beginsWith ), ( "in", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.in_ ), ( "notIn", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.notIn ) ]


buildUpdateKayoinobaInput :
    UpdateKayoinobaInputRequiredFields
    -> (UpdateKayoinobaInputOptionalFields -> UpdateKayoinobaInputOptionalFields)
    -> UpdateKayoinobaInput
buildUpdateKayoinobaInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent, yomigana = Absent, summary = Absent, price = Absent, target = Absent, contact = Absent, webSite = Absent, attributes = Absent, mapIdForSearch = Absent, kayoinobaPlaceId = Absent }
    in
    { id = required____.id, name = optionals____.name, yomigana = optionals____.yomigana, summary = optionals____.summary, price = optionals____.price, target = optionals____.target, contact = optionals____.contact, webSite = optionals____.webSite, attributes = optionals____.attributes, mapIdForSearch = optionals____.mapIdForSearch, kayoinobaPlaceId = optionals____.kayoinobaPlaceId }


type alias UpdateKayoinobaInputRequiredFields =
    { id : Api.ScalarCodecs.Id }


type alias UpdateKayoinobaInputOptionalFields =
    { name : OptionalArgument String
    , yomigana : OptionalArgument String
    , summary : OptionalArgument String
    , price : OptionalArgument Int
    , target : OptionalArgument String
    , contact : OptionalArgument String
    , webSite : OptionalArgument Api.ScalarCodecs.Awsurl
    , attributes : OptionalArgument KayoinobaAttributesInput
    , mapIdForSearch : OptionalArgument Api.ScalarCodecs.Id
    , kayoinobaPlaceId : OptionalArgument Api.ScalarCodecs.Id
    }


{-| Type for the UpdateKayoinobaInput input object.
-}
type alias UpdateKayoinobaInput =
    { id : Api.ScalarCodecs.Id
    , name : OptionalArgument String
    , yomigana : OptionalArgument String
    , summary : OptionalArgument String
    , price : OptionalArgument Int
    , target : OptionalArgument String
    , contact : OptionalArgument String
    , webSite : OptionalArgument Api.ScalarCodecs.Awsurl
    , attributes : OptionalArgument KayoinobaAttributesInput
    , mapIdForSearch : OptionalArgument Api.ScalarCodecs.Id
    , kayoinobaPlaceId : OptionalArgument Api.ScalarCodecs.Id
    }


{-| Encode a UpdateKayoinobaInput into a value that can be used as an argument.
-}
encodeUpdateKayoinobaInput : UpdateKayoinobaInput -> Value
encodeUpdateKayoinobaInput input____ =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "name", Encode.string |> Encode.optional input____.name ), ( "yomigana", Encode.string |> Encode.optional input____.yomigana ), ( "summary", Encode.string |> Encode.optional input____.summary ), ( "price", Encode.int |> Encode.optional input____.price ), ( "target", Encode.string |> Encode.optional input____.target ), ( "contact", Encode.string |> Encode.optional input____.contact ), ( "webSite", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecAwsurl) |> Encode.optional input____.webSite ), ( "attributes", encodeKayoinobaAttributesInput |> Encode.optional input____.attributes ), ( "mapIdForSearch", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.mapIdForSearch ), ( "kayoinobaPlaceId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.kayoinobaPlaceId ) ]


buildUpdateMapInput :
    UpdateMapInputRequiredFields
    -> (UpdateMapInputOptionalFields -> UpdateMapInputOptionalFields)
    -> UpdateMapInput
buildUpdateMapInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent, title = Absent, topInformation = Absent, zoom = Absent, centerLocation = Absent, category1Name = Absent, category2Name = Absent, category3Name = Absent, themeColor = Absent }
    in
    { id = required____.id, name = optionals____.name, title = optionals____.title, topInformation = optionals____.topInformation, zoom = optionals____.zoom, centerLocation = optionals____.centerLocation, category1Name = optionals____.category1Name, category2Name = optionals____.category2Name, category3Name = optionals____.category3Name, themeColor = optionals____.themeColor }


type alias UpdateMapInputRequiredFields =
    { id : Api.ScalarCodecs.Id }


type alias UpdateMapInputOptionalFields =
    { name : OptionalArgument String
    , title : OptionalArgument String
    , topInformation : OptionalArgument String
    , zoom : OptionalArgument Int
    , centerLocation : OptionalArgument LocationInput
    , category1Name : OptionalArgument String
    , category2Name : OptionalArgument String
    , category3Name : OptionalArgument String
    , themeColor : OptionalArgument ColorInput
    }


{-| Type for the UpdateMapInput input object.
-}
type alias UpdateMapInput =
    { id : Api.ScalarCodecs.Id
    , name : OptionalArgument String
    , title : OptionalArgument String
    , topInformation : OptionalArgument String
    , zoom : OptionalArgument Int
    , centerLocation : OptionalArgument LocationInput
    , category1Name : OptionalArgument String
    , category2Name : OptionalArgument String
    , category3Name : OptionalArgument String
    , themeColor : OptionalArgument ColorInput
    }


{-| Encode a UpdateMapInput into a value that can be used as an argument.
-}
encodeUpdateMapInput : UpdateMapInput -> Value
encodeUpdateMapInput input____ =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "name", Encode.string |> Encode.optional input____.name ), ( "title", Encode.string |> Encode.optional input____.title ), ( "topInformation", Encode.string |> Encode.optional input____.topInformation ), ( "zoom", Encode.int |> Encode.optional input____.zoom ), ( "centerLocation", encodeLocationInput |> Encode.optional input____.centerLocation ), ( "category1Name", Encode.string |> Encode.optional input____.category1Name ), ( "category2Name", Encode.string |> Encode.optional input____.category2Name ), ( "category3Name", Encode.string |> Encode.optional input____.category3Name ), ( "themeColor", encodeColorInput |> Encode.optional input____.themeColor ) ]


buildUpdatePlaceInput :
    UpdatePlaceInputRequiredFields
    -> (UpdatePlaceInputOptionalFields -> UpdatePlaceInputOptionalFields)
    -> UpdatePlaceInput
buildUpdatePlaceInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent, address = Absent, category = Absent, contact = Absent, location = Absent, hasImage = Absent, placeMapId = Absent }
    in
    { id = required____.id, name = optionals____.name, address = optionals____.address, category = optionals____.category, contact = optionals____.contact, location = optionals____.location, hasImage = optionals____.hasImage, placeMapId = optionals____.placeMapId }


type alias UpdatePlaceInputRequiredFields =
    { id : Api.ScalarCodecs.Id }


type alias UpdatePlaceInputOptionalFields =
    { name : OptionalArgument String
    , address : OptionalArgument String
    , category : OptionalArgument Api.Enum.PlaceCategory.PlaceCategory
    , contact : OptionalArgument String
    , location : OptionalArgument LocationInput
    , hasImage : OptionalArgument Bool
    , placeMapId : OptionalArgument Api.ScalarCodecs.Id
    }


{-| Type for the UpdatePlaceInput input object.
-}
type alias UpdatePlaceInput =
    { id : Api.ScalarCodecs.Id
    , name : OptionalArgument String
    , address : OptionalArgument String
    , category : OptionalArgument Api.Enum.PlaceCategory.PlaceCategory
    , contact : OptionalArgument String
    , location : OptionalArgument LocationInput
    , hasImage : OptionalArgument Bool
    , placeMapId : OptionalArgument Api.ScalarCodecs.Id
    }


{-| Encode a UpdatePlaceInput into a value that can be used as an argument.
-}
encodeUpdatePlaceInput : UpdatePlaceInput -> Value
encodeUpdatePlaceInput input____ =
    Encode.maybeObject
        [ ( "id", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "name", Encode.string |> Encode.optional input____.name ), ( "address", Encode.string |> Encode.optional input____.address ), ( "category", Encode.enum Api.Enum.PlaceCategory.toString |> Encode.optional input____.category ), ( "contact", Encode.string |> Encode.optional input____.contact ), ( "location", encodeLocationInput |> Encode.optional input____.location ), ( "hasImage", Encode.bool |> Encode.optional input____.hasImage ), ( "placeMapId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.placeMapId ) ]
