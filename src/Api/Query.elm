-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (GetKayoinobaRequiredArguments, GetMapRequiredArguments, GetPlaceRequiredArguments, ListKayoinobasOptionalArguments, ListMapsOptionalArguments, ListPlacesOptionalArguments, getKayoinoba, getMap, getPlace, listKayoinobas, listMaps, listPlaces)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias GetMapRequiredArguments =
    { id : Api.ScalarCodecs.Id }


getMap :
    GetMapRequiredArguments
    -> SelectionSet decodesTo Api.Object.Map
    -> SelectionSet (Maybe decodesTo) RootQuery
getMap requiredArgs____ object____ =
    Object.selectionForCompositeField "getMap" [ Argument.required "id" requiredArgs____.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias ListMapsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ModelMapFilterInput
    , limit : OptionalArgument Int
    , nextToken : OptionalArgument String
    }


listMaps :
    (ListMapsOptionalArguments -> ListMapsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ModelMapConnection
    -> SelectionSet (Maybe decodesTo) RootQuery
listMaps fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent, limit = Absent, nextToken = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Api.InputObject.encodeModelMapFilterInput, Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "nextToken" filledInOptionals____.nextToken Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "listMaps" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias GetPlaceRequiredArguments =
    { id : Api.ScalarCodecs.Id }


getPlace :
    GetPlaceRequiredArguments
    -> SelectionSet decodesTo Api.Object.Place
    -> SelectionSet (Maybe decodesTo) RootQuery
getPlace requiredArgs____ object____ =
    Object.selectionForCompositeField "getPlace" [ Argument.required "id" requiredArgs____.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias ListPlacesOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ModelPlaceFilterInput
    , limit : OptionalArgument Int
    , nextToken : OptionalArgument String
    }


listPlaces :
    (ListPlacesOptionalArguments -> ListPlacesOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ModelPlaceConnection
    -> SelectionSet (Maybe decodesTo) RootQuery
listPlaces fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent, limit = Absent, nextToken = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Api.InputObject.encodeModelPlaceFilterInput, Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "nextToken" filledInOptionals____.nextToken Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "listPlaces" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias GetKayoinobaRequiredArguments =
    { id : Api.ScalarCodecs.Id }


getKayoinoba :
    GetKayoinobaRequiredArguments
    -> SelectionSet decodesTo Api.Object.Kayoinoba
    -> SelectionSet (Maybe decodesTo) RootQuery
getKayoinoba requiredArgs____ object____ =
    Object.selectionForCompositeField "getKayoinoba" [ Argument.required "id" requiredArgs____.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias ListKayoinobasOptionalArguments =
    { filter : OptionalArgument Api.InputObject.ModelKayoinobaFilterInput
    , limit : OptionalArgument Int
    , nextToken : OptionalArgument String
    }


listKayoinobas :
    (ListKayoinobasOptionalArguments -> ListKayoinobasOptionalArguments)
    -> SelectionSet decodesTo Api.Object.ModelKayoinobaConnection
    -> SelectionSet (Maybe decodesTo) RootQuery
listKayoinobas fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent, limit = Absent, nextToken = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter Api.InputObject.encodeModelKayoinobaFilterInput, Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "nextToken" filledInOptionals____.nextToken Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "listKayoinobas" optionalArgs____ object____ (Basics.identity >> Decode.nullable)
