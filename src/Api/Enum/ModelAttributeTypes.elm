-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.ModelAttributeTypes exposing (ModelAttributeTypes(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


type ModelAttributeTypes
    = Binary
    | BinarySet
    | Bool
    | List
    | Map
    | Number
    | NumberSet
    | String
    | StringSet
    | Null_


list : List ModelAttributeTypes
list =
    [ Binary, BinarySet, Bool, List, Map, Number, NumberSet, String, StringSet, Null_ ]


decoder : Decoder ModelAttributeTypes
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "binary" ->
                        Decode.succeed Binary

                    "binarySet" ->
                        Decode.succeed BinarySet

                    "bool" ->
                        Decode.succeed Bool

                    "list" ->
                        Decode.succeed List

                    "map" ->
                        Decode.succeed Map

                    "number" ->
                        Decode.succeed Number

                    "numberSet" ->
                        Decode.succeed NumberSet

                    "string" ->
                        Decode.succeed String

                    "stringSet" ->
                        Decode.succeed StringSet

                    "_null" ->
                        Decode.succeed Null_

                    _ ->
                        Decode.fail ("Invalid ModelAttributeTypes type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ModelAttributeTypes -> String
toString enum____ =
    case enum____ of
        Binary ->
            "binary"

        BinarySet ->
            "binarySet"

        Bool ->
            "bool"

        List ->
            "list"

        Map ->
            "map"

        Number ->
            "number"

        NumberSet ->
            "numberSet"

        String ->
            "string"

        StringSet ->
            "stringSet"

        Null_ ->
            "_null"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ModelAttributeTypes
fromString enumString____ =
    case enumString____ of
        "binary" ->
            Just Binary

        "binarySet" ->
            Just BinarySet

        "bool" ->
            Just Bool

        "list" ->
            Just List

        "map" ->
            Just Map

        "number" ->
            Just Number

        "numberSet" ->
            Just NumberSet

        "string" ->
            Just String

        "stringSet" ->
            Just StringSet

        "_null" ->
            Just Null_

        _ ->
            Nothing
