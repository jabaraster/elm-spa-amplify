-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.PlaceCategory exposing (PlaceCategory(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


type PlaceCategory
    = Category1
    | Category2
    | Category3


list : List PlaceCategory
list =
    [ Category1, Category2, Category3 ]


decoder : Decoder PlaceCategory
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "CATEGORY1" ->
                        Decode.succeed Category1

                    "CATEGORY2" ->
                        Decode.succeed Category2

                    "CATEGORY3" ->
                        Decode.succeed Category3

                    _ ->
                        Decode.fail ("Invalid PlaceCategory type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : PlaceCategory -> String
toString enum____ =
    case enum____ of
        Category1 ->
            "CATEGORY1"

        Category2 ->
            "CATEGORY2"

        Category3 ->
            "CATEGORY3"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PlaceCategory
fromString enumString____ =
    case enumString____ of
        "CATEGORY1" ->
            Just Category1

        "CATEGORY2" ->
            Just Category2

        "CATEGORY3" ->
            Just Category3

        _ ->
            Nothing
